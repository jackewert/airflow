#!/usr/bin/env python3
"""
Report generation script for Airflow execution
This script demonstrates how to generate reports
"""

import sys
import logging
from datetime import datetime
import json
import os

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def read_previous_results():
    """Read results from previous processing steps"""
    logger.info("Reading previous processing results")
    
    results = {}
    
    # Try to read data processing stats
    stats_file = "/opt/airflow/logs/data_processing_stats.json"
    if os.path.exists(stats_file):
        with open(stats_file, 'r') as f:
            results['data_stats'] = json.load(f)
        logger.info("Found data processing statistics")
    else:
        logger.warning("Data processing statistics not found")
        results['data_stats'] = {}
    
    # Try to read sample script output
    sample_file = "/opt/airflow/logs/sample_script_output.json"
    if os.path.exists(sample_file):
        with open(sample_file, 'r') as f:
            results['sample_output'] = json.load(f)
        logger.info("Found sample script output")
    else:
        logger.warning("Sample script output not found")
        results['sample_output'] = {}
    
    return results

def generate_html_report(results):
    """Generate HTML report"""
    logger.info("Generating HTML report")
    
    html_content = f"""
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Airflow Processing Report</title>
    <style>
        body {{ font-family: Arial, sans-serif; margin: 40px; }}
        .header {{ background-color: #f0f0f0; padding: 20px; border-radius: 5px; }}
        .section {{ margin: 20px 0; padding: 15px; border-left: 4px solid #007bff; }}
        .success {{ color: #28a745; }}
        .warning {{ color: #ffc107; }}
        .error {{ color: #dc3545; }}
        pre {{ background-color: #f8f9fa; padding: 10px; border-radius: 3px; overflow-x: auto; }}
    </style>
</head>
<body>
    <div class="header">
        <h1>Airflow Processing Report</h1>
        <p>Generated on: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
    </div>
    
    <div class="section">
        <h2>Processing Summary</h2>
        <p>This report was generated by the Airflow DAG pipeline.</p>
    </div>
    
    <div class="section">
        <h2>Data Processing Statistics</h2>
        {f'<pre>{json.dumps(results.get("data_stats", {}), indent=2)}</pre>' if results.get("data_stats") else '<p class="warning">No data processing statistics available</p>'}
    </div>
    
    <div class="section">
        <h2>Sample Script Output</h2>
        {f'<pre>{json.dumps(results.get("sample_output", {}), indent=2)}</pre>' if results.get("sample_output") else '<p class="warning">No sample script output available</p>'}
    </div>
    
    <div class="section">
        <h2>Report Status</h2>
        <p class="success">Report generation completed successfully</p>
    </div>
</body>
</html>
"""
    
    return html_content

def save_report(html_content):
    """Save the HTML report"""
    report_file = "/opt/airflow/logs/processing_report.html"
    
    with open(report_file, 'w') as f:
        f.write(html_content)
    
    logger.info(f"Report saved to: {report_file}")
    return report_file

def main():
    """Main function for report generation"""
    logger.info("Starting report generation script")
    
    try:
        # Read previous results
        results = read_previous_results()
        
        # Generate HTML report
        html_content = generate_html_report(results)
        
        # Save report
        report_file = save_report(html_content)
        
        logger.info("Report generation completed successfully")
        logger.info(f"Report file: {report_file}")
        
        return 0
        
    except Exception as e:
        logger.error(f"Report generation failed: {e}")
        return 1

if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code) 